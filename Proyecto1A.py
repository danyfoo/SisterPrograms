__author__ = 'Maria Dolores Rivera Guzman'

from sympy import * #Importar la libreria Sympy
import itertools    #Importar libreria itertools para trabajar iterators

temperatura = [
    26.9,
    32.30744897959183,
    37.71489795918367,
    43.12234693877551,
    48.52979591836735,
    53.93724489795919,
    59.34469387755103,
    64.75214285714286,
    70.15959183673469,
    75.56704081632653,
    80.97448979591837,
    86.3819387755102,
    91.78938775510204,
    97.19683673469387,
    102.60428571428572,
    108.01173469387757,
    113.41918367346939,
    118.82663265306122,
    124.23408163265304,
    129.6415306122449,
    135.04897959183674,
    140.45642857142857,
    145.86387755102044,
    151.27132653061224,
    156.67877551020408,
    162.08622448979594,
    167.49367346938777,
    172.9011224489796,
    178.30857142857144,
    183.71602040816327,
    189.12346938775514,
    194.53091836734697,
    199.93836734693878,
    205.3458163265306,
    210.75326530612244,
    216.16071428571428,
    221.5681632653061,
    226.97561224489797,
    232.3830612244898,
    237.79051020408164,
    243.19795918367348,
    248.60540816326534,
    254.01285714285711,
    259.42030612244895,
    264.82775510204084,
    270.2352040816327,
    275.6426530612245,
    281.05010204081634,
    286.4575510204082,
    291.865]

resistencia = [
    106.40823138900183,
    139.7237015160309,
    173.03917164306003,
    206.35464177008913,
    239.6701118971182,
    272.98558202414733,
    306.30105215117646,
    339.6165222782055,
    372.93199240523455,
    406.2474625322636,
    439.5629326592928,
    472.8784027863219,
    506.1938729133509,
    539.50934304038,
    572.8248131674092,
    606.1402832944384,
    639.4557534214673,
    672.7712235484964,
    706.0866936755255,
    739.4021638025547,
    772.7176339295837,
    806.0331040566128,
    839.3485741836421,
    872.664044310671,
    905.9795144377,
    939.2949845647292,
    972.6104546917584,
    1005.9259248187875,
    1039.2413949458164,
    1072.5568650728455,
    1105.872335199875,
    1139.1878053269038,
    1172.5032754539327,
    1205.8187455809618,
    1239.134215707991,
    1272.44968583502,
    1305.765155962049,
    1339.0806260890784,
    1372.3960962161075,
    1405.7115663431364,
    1439.0270364701655,
    1472.3425065971949,
    1505.6579767242235,
    1538.9734468512527,
    1572.288916978282,
    1605.6043871053112,
    1638.9198572323403,
    1672.2353273593692,
    1705.5507974863983,
    1738.8662676134275]

m = Symbol('m') #Definimos incognita m que es la pendiente a encontrar
b = Symbol('b') #Definimos incognita b que es la ordenada al origen

aux = 0 #Resultado de la medicion
f = 0   #Sumatoria de todos los datos

#A continuacion ingresamos todos los datos de resistencia y temperatura (y,x) uno a uno a la ecuacion de la funcion
#que realizara los minimos cuadrados
for y,x,index in itertools.izip(resistencia,temperatura, range(1,len(resistencia)+1)):
    aux = (y - (m*x) - b)**2 #Se van ingresando todos los datos
    f+=aux
    if index<10:
        print 'd[',index,']:\t\t', expand(aux)
    else:
        print 'd[',index,']:\t', expand(aux)

print ('\n')*2, 'f = ', expand(f)

dm =  diff(f,m) #Derivada parcial de f con respecto a m

print 'd/dm = ' , dm

db = diff(f,b)  #Derivada parcial de f con respecto a b

print 'd/db = ' , db

print solve([dm,db] , [m,b])    #Resolvemos el sistema de ecuaciones